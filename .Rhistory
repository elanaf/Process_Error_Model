native.mat[native.mat == 0] <- 0.025 #get rid of 0s
#add the extra days so that it becomes a daily timestep
first <- matrix(NA, nrow = 12, ncol=17)
second <- matrix(native.mat[,1])
third <- matrix(NA, nrow = 12, ncol = 6)
fourth <- matrix(native.mat[,2])
fifth <- matrix(NA, nrow = 12, ncol = 6)
sixth <- matrix(native.mat[,3])
seventh <- matrix(NA, nrow = 12, ncol = 6)
eighth <- matrix(native.mat[,4])
native.mat <- cbind(first, second, third, fourth, fifth, sixth, seventh, eighth)
#predict the mean (expected value) of every timestep when you don't have an observation- see below
#Multi process error
multi.func.p<-function(r1, r2, obs,n0, species.vec){
rvec <- c(r1, r2)
dims <- dim(obs)
ntubs <- dims[1]
ts <- dims[2]
Nout <- matrix(0, nrow = ntubs, ncol = ts)
for(i in 1:ntubs){
Nout[i,1]<-n0*(1+rvec[species.vec[i]]*(1-n0/.995))
}
for(i in 2:ts){
for(j in 1:ntubs){
if(!is.na(obs[j, i-1])) {
Nout[j, i]<-obs[j, i-1]*(1+rvec[species.vec[j]]*(1-obs[j, i-1]/.995))
}
if(is.na(obs[j, i-1])){ #if it is an NA, do off the last predicted
Nout[j, i] <- Nout[j, i-1]*(1+rvec[species.vec[j]]*(1-Nout[j, i-1]/.995))
}
}
}
return(Nout)
}
#Multi process error - for the process error model, I just need to predict a number based on the previous timstep
#I would calculate the timestep between recorded values similar to how we did with the spatial models
#then the mean is your last observed value
#variance is the variance of the last timestepx the number of time steps because the variance increases linearly with the number of timesteps out
#tbefore putting it into dnorm, you calculate the sd from the variance (sqrt(timesteps x variance))
#qlogis of the predicted N
nll.multi.func.p<-function(lr1, lr2, species.vec,
obs,ln0, lsd){
r1<-exp(lr1)
r2<-exp(lr2)
s <-exp(lsd)
n0 <- exp(ln0)
predN<-multi.func.p(r1=r1,r2=r2,
obs=obs,species.vec = species.vec, n0 = n0)
# obs2 <- obs[!is.na(obs)]
# predN2 <- predN[!is.na(obs)]
# param <- dampack::beta_params(mean = predN2, sigma = sd)
# alpha <- param[1]
# alpha <- unlist(alpha)
# beta <- param[2]
# beta <- unlist(beta)
predN[predN==0]<-.01
predN[predN==1]<-.99
# print(obs)
# print(predN)
liks<-0
for(j in 1:nrow(obs)){
lastobs <- 0
for(i in 1:ncol(obs)){
if(!is.na(obs[j, i])){
tbtwn<-i-lastobs
# print(tbtwn)
liks<-c(liks, dnorm(x=qlogis(obs[j, i]),mean=qlogis(predN[j, i]),sd=sqrt(tbtwn*s^2)))
lastobs<-i
# print(liks)
}
}
}
# likes <- dbeta(x=obs2,shape1 = alpha, shape2 = beta)
# likes <- dnorm(x=qlogis(obs2), mean=plogis(predN2), sd = sd)
nll<--1*sum(log(liks[-1]))
return(nll)
}
library(bbmle)
# Create list of starting guesses for the multi model
start.list<-list(lr1=log(.1),
lr2 = log(.2),
lsd = log(.05),
ln0 = log(0.001))
# Create list of observed data for model
data.list<-list(obs=native.mat, species.vec = species.vec, method = "SANN")
# # Find MLE parameter estimates
fit_nd<-mle2(minuslogl=nll.multi.func.p,start=start.list,data=data.list, method = "SANN")
# # store MLE parameter estimates
cfs_nd<-exp(coef(fit_nd))
cfs_nd
## Predict historical dynamics from MLE parameter estimates####
pred_nd<-multi.func.p(r1 = cfs_nd[1], r2 = cfs_nd[2],
n0 = cfs_nd[3], obs = native.mat, species.vec = species.vec)
plot(native.mat, pred_nd, xlab = "Observed", ylab = "Predicted",pch = 16, las = 1, ylim = c(0,1))
abline(0, 1) # Add 1:1 line on figure indicating perfect fit
summary(lm(as.vector(native.mat) ~ as.vector(pred_nd)))
load("r_values_table.RData")
View(data_read)
read.csv("r_values.csv")
values <- read.csv("r_values.csv")
values
View(values)
library(quantreg)
library(tidyverse)
#load("r_values_table.RData")
values <- read.csv("r_values.csv")
load("main_dfs.RData")
pivot_longer()
?pivot_longer
View(greenhouse)
#Let's clean up the r values sheet we need to use
values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value")
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value")
View(dat)
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1)
#First, we need to make a table that includes both of these values
dat <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(dat, by = c("Species", "Density", "Phrag_Presence"))
View(dat2)
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat2)
rqfit <- rq(Cover.Phrag ~ r_value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(dat, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ r_value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
glimpse(data_read)
glimpse(dat2)
glimpse(dat)
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1) %>%
as.double(dat$r_value)
glimpse(values)
#Let's clean up the r values sheet we need to use
values$HW <- as.double(values$HW)
#load("r_values_table.RData")
values <- read.csv("r_values.csv")
unique(values$HW)
unique(values$HWO)
#load("r_values_table.RData")
values <- read.csv("r_values.csv")
glimpse(values)
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(dat, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ r_value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
library(gridExtra)
jpeg("quantile_regression.jpeg", height = 500, width = 500)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
plot(Cover.Phrag ~ value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
plot(summary(rqfit), parm = "r_value",
xlab = "Quantile",
ylab = "Slope Coefficient")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
jpeg("qreg_ci.jpeg", height = 400, width = 500)
plot(summary(rqfit), parm = "r_value",
xlab = "Quantile",
ylab = "Slope Coefficient")
dev.off()
#ggplot graph
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
jpeg("quantile_regression.jpeg", height = 400, width = 400)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
summary(rqfit)
0.43216-0.65637*0
0.43216-0.65637*.35
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
theme_bw()
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
xlab("Growth Rate (r)")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
xlab("Growth Rate (r)") +
theme_bw()
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
xlab("Growth Rate (r)") +
ylab("*Phragmites* Cover") +
theme_bw()
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
xlab("Growth Rate (r)") +
ylab("*Phragmites* Cover")
plot(summary(rqfit), parm = "r_value",
xlab = "Quantile",
ylab = "Slope Coefficient")
summary(rqfit)
0.27697 -0.44199 * 0
0.27697 -0.44199 * .35
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95)) +
xlab("Growth Rate (r)") +
ylab("*Phragmites* Cover")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(linetype = factor(..quantile..))) +
xlab("Growth Rate (r)") +
ylab("*Phragmites* Cover")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (r)") +
ylab("*Phragmites* Cover")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
legend(x = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
legend("Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles")
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..), size = 2)) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..), size = 1.5)) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..), size = 1)) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag, size = .5))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag), size= .2)+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag), size= .5)+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag), size= 1)+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..))) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..)),
size = 2) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..)),
size = 1) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..)),
size = 1.5) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
ggsave("quant_reg_ggplot.jpeg")
