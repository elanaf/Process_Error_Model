}
}
return(Nout)
}
#test
# multi.func.p(r = .7,
#              obs = native.mat, n0 = .1)
##NLL Function####
#Multi process error - for the process error model, I just need to predict a number based on the previous timstep
#I would calculate the timestep between recorded values similar to how we did with the spatial models
#then the mean is your last observed value
#variance is the variance of the last timestepx the number of time steps because the variance increases linearly with the number of timesteps out
#tbefore putting it into dnorm, you calculate the sd from the variance (sqrt(timesteps x variance))
#qlogis of the predicted N
nll.multi.func.p<-function(lr,
obs,ln0, lsd){
r<-exp(lr)
s <-exp(lsd)
n0 <- exp(ln0)
predN<-multi.func.p(r=r,
obs=obs,n0 = n0)
# obs2 <- obs[!is.na(obs)]
# predN2 <- predN[!is.na(obs)]
# param <- dampack::beta_params(mean = predN2, sigma = sd)
# alpha <- param[1]
# alpha <- unlist(alpha)
# beta <- param[2]
# beta <- unlist(beta)
predN[predN==0]<-.01
predN[predN==1]<-.99
# print(obs)
# print(predN)
liks<-0
for(j in 1:nrow(obs)){
lastobs <- 0
for(i in 1:ncol(obs)){
if(!is.na(obs[j, i])){
tbtwn<-i-lastobs
# print(tbtwn)
liks<-c(liks, dnorm(x=qlogis(obs[j, i]),mean=qlogis(predN[j, i]),sd=sqrt(tbtwn*s^2)))
lastobs<-i
# print(liks)
}
}
}
# likes <- dbeta(x=obs2,shape1 = alpha, shape2 = beta)
# likes <- dnorm(x=qlogis(obs2), mean=plogis(predN2), sd = sd)
nll<--1*sum(log(liks[-1]))
return(nll)
}
#test
# nll.multi.func.p(lr = log(.4),
#                  ln0 = log(.01), obs = native.mat, lsd = log(.05))
##Find MLE parameters####
library(bbmle)
# Create list of starting guesses for the multi model
start.list<-list(lr=log(.1),
lsd = log(.05),
ln0 = log(0.001))
# Create list of observed data for model
data.list<-list(obs=native.mat, method = "SANN")
# Find MLE parameter estimates
fit_n<-mle2(minuslogl=nll.multi.func.p,start=start.list,data=data.list, method = "SANN")
# store MLE parameter estimates
cfs_n<-exp(coef(fit_n))
cfs_n
r1vec<-seq(0,0.01,length.out=100) # Vector of r values to explore
nlls.r1<-rep(NA,length(r1vec)) # Storage vector for nll of the model at each fixed value of r
# Loop through all values in rvec, fit the model with r fixed, store NLL
for(i in 1:length(r1vec)){
fittmp<-mle2(minuslogl=nll.multi.func.p,start=list(ln0=log(cfs_n[2]), lsd = log(cfs_n[3])),
fixed=list(lr=log(r1vec[i])),
data=list(obs=native.mat, method = "SANN"))
nlls.r1[i]<--1*logLik(fittmp) # extract NLL from model fit
}
# Plot the difference of nll between models with fixed r values and the NLL of the full model.
plot(r1vec,nlls.r1--1*logLik(fit_n))
abline(h=1.92) # add line at critical value
r1vec<-seq(0,0.05,length.out=100) # Vector of r values to explore
nlls.r1<-rep(NA,length(r1vec)) # Storage vector for nll of the model at each fixed value of r
# Loop through all values in rvec, fit the model with r fixed, store NLL
for(i in 1:length(r1vec)){
fittmp<-mle2(minuslogl=nll.multi.func.p,start=list(ln0=log(cfs_n[2]), lsd = log(cfs_n[3])),
fixed=list(lr=log(r1vec[i])),
data=list(obs=native.mat, method = "SANN"))
nlls.r1[i]<--1*logLik(fittmp) # extract NLL from model fit
}
# Plot the difference of nll between models with fixed r values and the NLL of the full model.
plot(r1vec,nlls.r1--1*logLik(fit_n))
abline(h=1.92) # add line at critical value
r1vec<-seq(0,0.1,length.out=100) # Vector of r values to explore
nlls.r1<-rep(NA,length(r1vec)) # Storage vector for nll of the model at each fixed value of r
# Loop through all values in rvec, fit the model with r fixed, store NLL
for(i in 1:length(r1vec)){
fittmp<-mle2(minuslogl=nll.multi.func.p,start=list(ln0=log(cfs_n[2]), lsd = log(cfs_n[3])),
fixed=list(lr=log(r1vec[i])),
data=list(obs=native.mat, method = "SANN"))
nlls.r1[i]<--1*logLik(fittmp) # extract NLL from model fit
}
# Plot the difference of nll between models with fixed r values and the NLL of the full model.
plot(r1vec,nlls.r1--1*logLik(fit_n))
abline(h=1.92) # add line at critical value
r1vec<-seq(0,0.08,length.out=100) # Vector of r values to explore
nlls.r1<-rep(NA,length(r1vec)) # Storage vector for nll of the model at each fixed value of r
# Loop through all values in rvec, fit the model with r fixed, store NLL
for(i in 1:length(r1vec)){
fittmp<-mle2(minuslogl=nll.multi.func.p,start=list(ln0=log(cfs_n[2]), lsd = log(cfs_n[3])),
fixed=list(lr=log(r1vec[i])),
data=list(obs=native.mat, method = "SANN"))
nlls.r1[i]<--1*logLik(fittmp) # extract NLL from model fit
}
# Plot the difference of nll between models with fixed r values and the NLL of the full model.
plot(r1vec,nlls.r1--1*logLik(fit_n))
abline(h=1.92) # add line at critical value
target.nll<-min(nlls.r1)+1.92 # What is the target value of NLL for CI limits?
# Specify the range of r values in which the lower CI limit exists
r1.test<-r1vec[1:which.min(abs(r1vec-cfs_n[1]))]
# specify vector of nll values associated with r values being examined
nll.test<-nlls.r1[1:which.min(abs(r1vec-cfs_n[1]))]
# Estimate the r value at which the relationship between r and nll crosses
# the target.nll
lwr.r1<-approx(y=r1.test,x=nll.test,xout=target.nll)$y
# Specify the range of r values in which the lower CI limit exists
r1.test<-r1vec[which.min(abs(r1vec-cfs_n[1])):length(r1vec)]
# specify vector of nll values associated with r values being examined
nll.test<-nlls.r1[which.min(abs(r1vec-cfs_n[1])):length(nlls.r1)]
# Estimate the r value at which the relationship between r and nll crosses
# the target.nll
upr.r1<-approx(y=r1.test,x=nll.test,xout=target.nll)$y
lwr.r1
upr.r1
library(quantreg)
library(tidyverse)
#load("r_values_table.RData")
values <- read.csv("r_values.csv")
load("main_dfs.RData")
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(dat, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ r_value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
library(gridExtra)
jpeg("quantile_regression.jpeg", height = 400, width = 400)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
library(quantreg)
library(tidyverse)
#load("r_values_table.RData")
values <- read.csv("r_values.csv")
load("main_dfs.RData")
#Let's clean up the r values sheet we need to use
dat <- values %>%
pivot_longer(4:7,
names_to = "Tub",
values_to = "r_value") %>%
separate(col = "Tub",
into = c("Density", "Phrag_Presence"),
sep = 1)
#First, we need to make a table that includes both of these values
dat2 <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(dat, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ r_value, tau = c(.05, .25, .5, .75, .95),data = dat2)
summary(rqfit)
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
library(gridExtra)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
jpeg("quantile_regression2.jpeg", height = 400, width = 400)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
jpeg("qreg_ci2.jpeg", height = 400, width = 500)
plot(summary(rqfit), parm = "r_value",
xlab = "Quantile",
ylab = "Slope Coefficient")
dev.off()
#ggplot graph
dat2 %>%
ggplot(aes(x = r_value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95),
aes(color = factor(..quantile..)),
size = 1.5) +
xlab("Growth Rate (Proportional Cover Per Day)") +
ylab("*Phragmites* Cover") +
labs(color = "Quantiles") +
theme(axis.title.y = ggtext::element_markdown())
jpeg("quantile_regression.jpeg", height = 400, width = 400)
plot(Cover.Phrag ~ r_value, data = dat2,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
jpeg("qreg_ci.jpeg", height = 400, width = 500)
plot(summary(rqfit), parm = "r_value",
xlab = "Quantile",
ylab = "Slope Coefficient")
dev.off()
summary(rqfit)
0.43216 - 0.65637 * .35
0.27697 -0.44199 * .35
values <- read.csv("r_values.csv")
View(values)
library(tidyverse)
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
?pivot_longer
graph_values <- pivot_longer(cols = c(HW, HWO, LW, LWO),
names_to = "r",
values_to = "r_value")
graph_values <- pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
glimpse(values)
View(graph_values)
graph_values <- pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr'),
names_to = "Upr_name",
values_to = "Upr")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW_lwr', 'HWO_lwr', 'LW_lwr', 'LWO_lwr'),
names_to = "Lwr_name",
values_to = "Lwr")
graph_values <- graph_values %>%
select(-c(Upr_name, Lwr_name))
graph_values <- graph_values %>%
unique(c(Species, r, r_values, Upr, Lwr))
graph_values <- graph_values %>%
unique(Species, r, r_values, Upr, Lwr)
graph_values <- graph_values %>%
unique('Species', 'r', 'r_values', 'Upr', 'Lwr')
graph_values <- graph_values %>%
unique('Species', 'r_values')
graph_values <- graph_values %>%
filter(unique('Species', 'r_values'))
graph_values <- graph_values %>%
unique('Species', 'r_values')
graph_values <- graph_values %>%
distinct('Species', 'r_values')
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr'),
names_to = "Upr_name",
values_to = "Upr")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW_lwr', 'HWO_lwr', 'LW_lwr', 'LWO_lwr'),
names_to = "Lwr_name",
values_to = "Lwr")
graph_values <- graph_values %>%
select(-c(Upr_name, Lwr_name))
graph_values <- graph_values %>%
distinct(Species, r_values)
graph_values <- graph_values %>%
group_by(Species, r_values) %>%
distinct()
graph_values %>%
group_by(Species, r_values) %>%
distinct()
graph_values %>%
group_by(Species, r_values)
graph_values %>%
group_by(Species, r_value) %>%
distinct()
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
values <- read.csv("r_values.csv")
18*4
graph_values <- graph_values %>%
pivot_longer(cols = c('HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr'),
names_to = "Upr_name",
values_to = "Upr")
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "r",
values_to = "r_value")
graph_values %>%
group_by(Species, r, r_values) %>%
distinct()
graph_values %>%
group_by(Species, r, r_value) %>%
distinct()
graph_values <- graph_values %>%
group_by(Species, r, r_value) %>%
distinct()
graph_values$upr <- 0
graph_values$lwr <- 0
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO_lwr'),
names_to = "names",
values_to = "value")
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- values %>%
select(c(Species, HW, HWO, LW, LWO))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO_lwr'),
names_to = "names",
values_to = "value")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO'),
names_to = "names",
values_to = "value")
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO_lwr'),
names_to = "names",
values_to = "value")
graph_values <- values %>%
select(c(Species, HW, HWO, LW, LWO))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO_lwr'),
names_to = "names",
values_to = "value")
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_values <- graph_values %>%
pivot_longer(cols = c('HW':'LWO_lwr'),
names_to = "names",
values_to = "value")
?pivot_wider
graph_values <- values %>%
select(-c(Model, R2, n0, sd))
graph_r <- graph_values %>%
pivot_longer(cols = c('HW':'LWO'),
names_to = "names",
values_to = "value")
graph_upr <- graph_values %>%
pivot_longer(cols = c('HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr'),
names_to = "upr_names",
values_to = "upr_value")
graph_lwr <- graph_values %>%
pivot_longer(cols = c('HW_lwr', 'HWO_lwr', 'LW_lwr', 'LWO_lwr'),
names_to = "lwr_names",
values_to = "lwr_value")
View(graph_r)
graph_r <- graph_values %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "names",
values_to = "value")
graph_r <- graph_values %>%
select(c('HW', 'HWO', 'LW', 'LWO')) %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "names",
values_to = "value")
graph_r <- graph_values %>%
select(c('Species', 'HW', 'HWO', 'LW', 'LWO')) %>%
pivot_longer(cols = c('HW', 'HWO', 'LW', 'LWO'),
names_to = "names",
values_to = "value")
graph_upr <- graph_values %>%
select('Species', 'HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr')
graph_upr <- graph_values %>%
select('Species', 'HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr') %>%
pivot_longer(cols = c('HW_upr', 'HWO_upr', 'LW_upr', 'LWO_upr'),
names_to = "upr_names",
values_to = "upr_value")
View(graph_upr)
graph_lwr <- graph_values %>%
select('Species', 'HW_lwr', 'HWO_lwr', 'LW_lwr', 'LWO_lwr') %>%
pivot_longer(cols = c('HW_lwr', 'HWO_lwr', 'LW_lwr', 'LWO_lwr'),
names_to = "lwr_names",
values_to = "lwr_value")
View(graph_lwe)
View(graph_lwr)
graph1 <- left_join(graph_r, graph_upr)
View(graph1)
graph_upr$names <- graph_r$names
graph_lwr$names <- graph_r$names
graph1 <- left_join(graph_r, graph_upr, by = c("Species", "names"))
graph2 <- left_join(graph1, graph_lwr, by = c("Species", 'names'))
View(graph2)
final <- graph2 %>%
select(-c(upr_names, lwr_names))
View(final)
ggplot(aes(x = names, y = values)) +
geom_point+
facet_grid(~Species)
ggplot(data = final, aes(x = names, y = values)) +
geom_point+
facet_grid(~Species)
ggplot(data = final, aes(x = names, y = values)) +
geom_point()+
facet_grid(~Species)
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_grid(~Species)
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species)
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 3)
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 3) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value))
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 3) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value)) +
ylab("Treatment") +
xlab("r")
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 3) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value)) +
ylab("Treatment") +
xlab("Growth rate (r)")
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 3) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value)) +
xlab("Treatment") +
ylab("Growth rate (r)")
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 6) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value)) +
xlab("Treatment") +
ylab("Growth rate (r)")
ggsave("r_values_graph.jpeg")
final %>%
ggplot(aes(x = names, y = value)) +
geom_point() +
facet_wrap(~Species, ncol = 6) +
geom_errorbar(aes(ymin = lwr_value, ymax = upr_value)) +
xlab("Treatment") +
ylab("Growth rate (r)") +
theme(axis.text.x = element_text(angle = 45, hjust = 0.9))
ggsave("r_values_graph.jpeg")
