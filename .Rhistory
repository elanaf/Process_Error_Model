rqfit <- rq(Cover.Phrag ~ value, data = dat)
summary(rqfit)
faq()
faq(rqfit)
faq(summary(rqfit))
summary(rqfit)
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat)
summary(rqfit)
mtcars
rqfit
#Now graph them
plot(Cover.Phrag ~ value, data = dat)
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italics("Phragmites ")"cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italics("Phragmites "), "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites "), "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites ") "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites ") + "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites ")  "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites "),  "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = expression(italic("Phragmites ")  "cover"))
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = substitute(paste(italic("Phragmites "), "cover"))
)
#Now graph them
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
rqfit[,1]
rqfit
rqfit[1,]
rqfit[1]
rqfit[2]
coef(rqfit)[, 1]
coef(rqfit)[, 2]
coef(rqfit)[, 3]
coef(rqfit)[, 4]
coef(rqfit)[, 5]
coef(rqfit)[, 6]
#Now graph them
color <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333")
rqfit$coefficients
abline(coef(rqfit)[, j], col = colors[j])
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = colors[j])
}
ncol(rqfit$coefficients)
j <- 1
coef(rqfit)[, j]
abline(coef(rqfit)[, 1], col = colors[1]
)
#Now graph them
color <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = colors[j])
}
abline(coef(rqfit)[, j], col = color[j])
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
?legend
legend(legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = 4, legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = 1, legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = right, legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = "right", legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
color <- c("#ffe6e6", "#ffcccc", "#ff9999", "#ff6666", "#ff3333")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95), col = color)
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
#Now graph them
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)", ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover")),
main = "Quantile regression"
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
summary(rqfit)
rqfit
summary(rqfit)
polygon(x=c(seq(1,5),rev(seq(1,5))),y=c(lwrN,rev(uprN)),
col=adjustcolor("dodgerblue",.25),
border=adjustcolor("dodgerblue",.25))
polygon(x=c(seq(1,5),rev(seq(1,5))),y=c(1,rev(5)),
col=adjustcolor("dodgerblue",.25),
border=adjustcolor("dodgerblue",.25))
polygon(x=c(seq(1,5),rev(seq(1,5))),y=c(1,rev(1)),
col=adjustcolor("dodgerblue",.25),
border=adjustcolor("dodgerblue",.25))
polygon(x=c(seq(1,5),rev(seq(1,5))),y=c(-1,rev(1)),
col=adjustcolor("dodgerblue",.25),
border=adjustcolor("dodgerblue",.25))
#Now graph them
dat %>%
mutate(quant =
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
})
#Now graph them
dat <- dat %>%
mutate(quant =
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
})
#Now graph them
dat <- dat %>%
mutate(quant =
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
})
#Now graph them
reg_coef <- c()
for (j in 1:ncol(rqfit$coefficients)) {
reg_coef[j] <- coef(rqfit)[, j]
})
for (j in 1:ncol(rqfit$coefficients)) {
reg_coef[j] <- coef(rqfit)[, j]
}
reg_coef
coef(rqfit)[,1]
coef(rqfit)[,2]
coef(rqfit)[,3]
coef(rqfit)[,4]
coef(rqfit)[,5]
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point()
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile()
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(color = color, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(color = color, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
color
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(color = red, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(color = color, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(colour = color, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#Now graph them
#base r graph
color_list <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(colour = color_list, quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#ggplot graph with confidence intervals
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
?geom_smooth
plot(summary(rqfit))
plot(summary(rqfit), parm = x)
plot(summary(rqfit), parm = "x")
plot(summary(rqfit), parm = "y")
#ggplot graph
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover")),
main = "Quantile regression"
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
summary(rqfit)
rqfit
summary(rqfit, se = "ker")
?rq
summary(rqfit)
summary(rqfit, method = "rank")
summary(rqfit, method = "rank")
summary(rqfit, method = "nid")
summary(rqfit, method = "oiid")
summary(rqfit, method = "iid")
summary(rqfit, se = "rank")
summary(rqfit, se = "iid")
summary(rqfit, se = "nid")
summary(rqfit, se = "ker")
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat)
summary(rqfit, se = "ker") #need to check about which method of se is best
summary(rqfit) #need to check about which method of se is best
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover")),
main = "Quantile regression"
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1)
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
library(gridExtra)
jpeg("r_value_data.jpeg", height = 1500, width = 400)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
library(gridExtra)
jpeg("r_value_data.jpeg", height = 1500, width = 400)
grid.table(data_read)
dev.off()
save(data_read, file = "r_values_table.RData")
jpeg("quantile_regression.jpeg", height = 1500, width = 400)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
jpeg("quantile_regression.jpeg", height = 400, width = 400)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
#ggplot graph
dat %>%
ggplot(aes(x = value, y = Cover.Phrag))+
geom_point() +
geom_quantile(quantiles = c(0.05, 0.25, 0.5, 0.75, 0.95))
jpeg("quantile_regression.jpeg", height = 4000, width = 4000)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
jpeg("quantile_regression.jpeg", height = 1000, width = 1000)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
jpeg("quantile_regression.jpeg", height = 800, width = 800)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
jpeg("quantile_regression.jpeg", height = 500, width = 500)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
library(quantreg)
load("r_values_table.RData")
load("main_dfs.RData")
dat <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
library(tidyverse)
dat <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat)
summary(rqfit)
#Now graph them
#base r graph
color <- c("#ffcccc", "#ff9999", "#ff6666", "#ff3333", "#ff0000")
library(gridExtra)
jpeg("quantile_regression.jpeg", height = 500, width = 500)
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
dev.off()
plot(Cover.Phrag ~ value, data = dat,
xlab = "Growth rate (r)",
ylab = substitute(paste("Proportional ", italic("Phragmites "), "cover"))
)
for (j in 1:ncol(rqfit$coefficients)) {
abline(coef(rqfit)[, j], col = color[j])
}
legend(x = "topright", legend = c(0.05, 0.25, 0.5, 0.75, 0.95),
col = color, lty = 1, title = "Quantiles")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit))
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "x")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "y")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value")
rqfit
summary(rqfit)
summary(rqfit, se = "rank")
.42270 + -0.78647(0)
.42270  - 0.78647
.42270  - 0.78647 * 0.35
.42270  - 0.78647 * 0.2
.42270  - 0.78647 * 0.1
.42270  - 0.78647 * -0.1
.42270  - 0.78647 * -0.01
.42270  - 0.78647 * 0.01
.42270  - 0.78647 * 0.00
.42270  - 0.78647 * .35
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value")
library(quantreg)
library(tidyverse)
load("r_values_table.RData")
load("main_dfs.RData")
dat <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat)
summary(rqfit)
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient",
title = "")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit),
xlab = "Quantile",
ylab = "Slope Coefficient")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
jpeg("qreg_ci.jpeg", height = 500, width = 500)
#built in function to show the change in quantile coefficients and the confidence intervals
#red lines is the least squares estimate and confidence intervals
#black dots are slope coefficient at the given quantile
jpeg("qreg_ci.jpeg", height = 400, width = 500)
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
dev.off()
plot(summary(rqfit))
library(quantreg)
library(tidyverse)
load("r_values_table.RData")
load("main_dfs.RData")
dat <- greenhouse %>%
filter(Date_Cleaned == "2022-05-16",
Phrag_Presence == "W") %>%
select(Species, Density, Phrag_Presence, Block, Cover.Phrag) %>%
left_join(data_read, by = c("Species", "Density", "Phrag_Presence"))
rqfit <- rq(Cover.Phrag ~ value, tau = c(.05, .25, .5, .75, .95),data = dat)
plot(summary(rqfit))
source("~/Documents/USUClasses/Thesis_Code/Process_Error_model/quantreg.R", echo=TRUE)
plot(summary(rqfit), parm = "value",
xlab = "Quantile",
ylab = "Slope Coefficient")
